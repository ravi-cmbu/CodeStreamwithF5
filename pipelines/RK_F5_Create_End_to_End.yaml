---
project: IndiaLabs
kind: PIPELINE
name: RK_F5_Create_End_to_End
icon: organization,left, is-purple
enabled: true
description: This Pipeline adds node, creates pool, virtual server and adds pool members and creates docker
  web servers.
concurrency: 10
input:
  ipAddress: ''
  nodeDescription: ''
  nodeName: ''
_inputMeta:
  nodeName:
    mandatory: true
    description: Please enter the node name without spaces or special characters
  ipAddress:
    mandatory: true
    description: Please enter the IP address of the node.
  nodeDescription:
    mandatory: true
    description: Please input the node description
workspace:
  type: DOCKER
  endpoint: ''
  image: ''
  registry: ''
  path: ''
  autoCloneForTrigger: false
  limits:
    memory: 512
    cpu: 1.0
stageOrder:
- Stage0
stages:
  Stage0:
    taskOrder:
    - cleanUp
    - getToken,createWebservers
    - addNode
    - createPool
    - createVirtualServer
    tasks:
      createWebservers:
        type: SSH
        input:
          script: |2

            sleep 2
            docker run -d -p 8081:80 --name one yeasy/simple-web:latest
            sleep 2
            docker run -d -p 8082:80 --name two yeasy/simple-web:latest
            sleep 2
            docker run -d -p 8083:80 --name three yeasy/simple-web:latest
          username: cloudadmin
          password: ${var.cloudadmin}
          passphrase: ''
          privatekey: ''
          host: 172.16.40.12
          workingDirectory: ''
          arguments: [
            ]
          environmentVariables: {
            }
          continueOnCommandFailure: false
      createPool:
        type: REST
        input:
          action: post
          url: https://172.16.40.16/mgmt/tm/ltm/pool
          headers:
            Accept: application/json
            Content-Type: application/json
            X-F5-Auth-Token: ${Stage0.getToken.output.outputProperties.token}
          payload: |-
            {
              "name":"${input.nodeName}_pool",
              "partition":"Common",
              "monitor":"/Common/http",
              "members":[{"name":"workstation:8081","address":"172.16.40.12"}],
              "members":[{"name":"workstation:8082","address":"172.16.40.12"}],
              "members":[{"name":"workstation:8083","address":"172.16.40.12"}]
             }
      createVirtualServer:
        type: REST
        input:
          action: post
          url: https://172.16.40.16/mgmt/tm/ltm/virtual
          headers:
            Accept: application/json
            Content-Type: application/json
            X-F5-Auth-Token: ${Stage0.getToken.output.outputProperties.token}
          payload: |-
            {
              "name": "${input.nodeName}_virtualServer",
              "destination": "172.16.39.21:80",
              "mask": "255.255.255.255",
              "source": "0.0.0.0/0",
              "sourceAddressTranslation": {
                "type": "automap"
              },
              "pool": "${input.nodeName}_pool"

            }
      addNode:
        type: REST
        input:
          action: post
          url: https://172.16.40.16/mgmt/tm/ltm/node
          headers:
            Accept: application/json
            Content-Type: application/json
            X-F5-Auth-Token: ${Stage0.getToken.output.outputProperties.token}
          payload: |-
            {
              "name":"${input.nodeName}",
              "address":"${input.ipAddress}",
              "description":"${input.nodeDescription}"
            }
      cleanUp:
        type: SSH
        ignoreFailure: true
        input:
          script: ./cleanup.sh
          username: cloudadmin
          password: ${var.cloudadmin}
          passphrase: ''
          privatekey: ''
          host: 172.16.40.12
          workingDirectory: ''
          arguments: [
            ]
          environmentVariables: {
            }
          continueOnCommandFailure: false
      getToken:
        type: Pipeline
        input:
          pipeline: RK_F5_Get_Token
          inputProperties: {
            }
